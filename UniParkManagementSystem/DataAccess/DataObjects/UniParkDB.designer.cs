#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace UniParkManagementSystem.DataAccess.DataObjects
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="UniPark")]
	public partial class UniParkDBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertTblVehicle(TblVehicle instance);
    partial void UpdateTblVehicle(TblVehicle instance);
    partial void DeleteTblVehicle(TblVehicle instance);
    partial void InsertTblLot(TblLot instance);
    partial void UpdateTblLot(TblLot instance);
    partial void DeleteTblLot(TblLot instance);
    #endregion
		
		public UniParkDBDataContext() : 
				base(global::UniParkManagementSystem.Properties.Settings.Default.UniParkConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public UniParkDBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public UniParkDBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public UniParkDBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public UniParkDBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<TblVehicle> TblVehicles
		{
			get
			{
				return this.GetTable<TblVehicle>();
			}
		}
		
		public System.Data.Linq.Table<TblLot> TblLots
		{
			get
			{
				return this.GetTable<TblLot>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TblVehicles")]
	public partial class TblVehicle : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _LicensePlateId;
		
		private string _VehicleType;
		
		private int _VehicleHeight;
		
		private int _VehicleWidth;
		
		private int _VehicleLength;
		
		private string _User;
		
		private EntitySet<TblLot> _TblLots;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLicensePlateIdChanging(string value);
    partial void OnLicensePlateIdChanged();
    partial void OnVehicleTypeChanging(string value);
    partial void OnVehicleTypeChanged();
    partial void OnVehicleHeightChanging(int value);
    partial void OnVehicleHeightChanged();
    partial void OnVehicleWidthChanging(int value);
    partial void OnVehicleWidthChanged();
    partial void OnVehicleLengthChanging(int value);
    partial void OnVehicleLengthChanged();
    partial void OnUserChanging(string value);
    partial void OnUserChanged();
    #endregion
		
		public TblVehicle()
		{
			this._TblLots = new EntitySet<TblLot>(new Action<TblLot>(this.attach_TblLots), new Action<TblLot>(this.detach_TblLots));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LicensePlateId", DbType="Char(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string LicensePlateId
		{
			get
			{
				return this._LicensePlateId;
			}
			set
			{
				if ((this._LicensePlateId != value))
				{
					this.OnLicensePlateIdChanging(value);
					this.SendPropertyChanging();
					this._LicensePlateId = value;
					this.SendPropertyChanged("LicensePlateId");
					this.OnLicensePlateIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VehicleType", DbType="Char(20) NOT NULL", CanBeNull=false)]
		public string VehicleType
		{
			get
			{
				return this._VehicleType;
			}
			set
			{
				if ((this._VehicleType != value))
				{
					this.OnVehicleTypeChanging(value);
					this.SendPropertyChanging();
					this._VehicleType = value;
					this.SendPropertyChanged("VehicleType");
					this.OnVehicleTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VehicleHeight", DbType="Int NOT NULL")]
		public int VehicleHeight
		{
			get
			{
				return this._VehicleHeight;
			}
			set
			{
				if ((this._VehicleHeight != value))
				{
					this.OnVehicleHeightChanging(value);
					this.SendPropertyChanging();
					this._VehicleHeight = value;
					this.SendPropertyChanged("VehicleHeight");
					this.OnVehicleHeightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VehicleWidth", DbType="Int NOT NULL")]
		public int VehicleWidth
		{
			get
			{
				return this._VehicleWidth;
			}
			set
			{
				if ((this._VehicleWidth != value))
				{
					this.OnVehicleWidthChanging(value);
					this.SendPropertyChanging();
					this._VehicleWidth = value;
					this.SendPropertyChanged("VehicleWidth");
					this.OnVehicleWidthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VehicleLength", DbType="Int NOT NULL")]
		public int VehicleLength
		{
			get
			{
				return this._VehicleLength;
			}
			set
			{
				if ((this._VehicleLength != value))
				{
					this.OnVehicleLengthChanging(value);
					this.SendPropertyChanging();
					this._VehicleLength = value;
					this.SendPropertyChanged("VehicleLength");
					this.OnVehicleLengthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[User]", Storage="_User", DbType="Char(30) NOT NULL", CanBeNull=false)]
		public string User
		{
			get
			{
				return this._User;
			}
			set
			{
				if ((this._User != value))
				{
					this.OnUserChanging(value);
					this.SendPropertyChanging();
					this._User = value;
					this.SendPropertyChanged("User");
					this.OnUserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TblVehicle_TblLot", Storage="_TblLots", ThisKey="LicensePlateId", OtherKey="VehicleLicensePlateId")]
		public EntitySet<TblLot> TblLots
		{
			get
			{
				return this._TblLots;
			}
			set
			{
				this._TblLots.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TblLots(TblLot entity)
		{
			this.SendPropertyChanging();
			entity.TblVehicle = this;
		}
		
		private void detach_TblLots(TblLot entity)
		{
			this.SendPropertyChanging();
			entity.TblVehicle = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TblLots")]
	public partial class TblLot : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LodId;
		
		private int _TimeLimit;
		
		private System.Nullable<System.DateTime> _CheckInTime;
		
		private string _VehicleLicensePlateId;
		
		private EntityRef<TblVehicle> _TblVehicle;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLodIdChanging(int value);
    partial void OnLodIdChanged();
    partial void OnTimeLimitChanging(int value);
    partial void OnTimeLimitChanged();
    partial void OnCheckInTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnCheckInTimeChanged();
    partial void OnVehicleLicensePlateIdChanging(string value);
    partial void OnVehicleLicensePlateIdChanged();
    #endregion
		
		public TblLot()
		{
			this._TblVehicle = default(EntityRef<TblVehicle>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LodId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int LodId
		{
			get
			{
				return this._LodId;
			}
			set
			{
				if ((this._LodId != value))
				{
					this.OnLodIdChanging(value);
					this.SendPropertyChanging();
					this._LodId = value;
					this.SendPropertyChanged("LodId");
					this.OnLodIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeLimit", DbType="Int NOT NULL")]
		public int TimeLimit
		{
			get
			{
				return this._TimeLimit;
			}
			set
			{
				if ((this._TimeLimit != value))
				{
					this.OnTimeLimitChanging(value);
					this.SendPropertyChanging();
					this._TimeLimit = value;
					this.SendPropertyChanged("TimeLimit");
					this.OnTimeLimitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CheckInTime", DbType="Date")]
		public System.Nullable<System.DateTime> CheckInTime
		{
			get
			{
				return this._CheckInTime;
			}
			set
			{
				if ((this._CheckInTime != value))
				{
					this.OnCheckInTimeChanging(value);
					this.SendPropertyChanging();
					this._CheckInTime = value;
					this.SendPropertyChanged("CheckInTime");
					this.OnCheckInTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VehicleLicensePlateId", DbType="Char(20)")]
		public string VehicleLicensePlateId
		{
			get
			{
				return this._VehicleLicensePlateId;
			}
			set
			{
				if ((this._VehicleLicensePlateId != value))
				{
					if (this._TblVehicle.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVehicleLicensePlateIdChanging(value);
					this.SendPropertyChanging();
					this._VehicleLicensePlateId = value;
					this.SendPropertyChanged("VehicleLicensePlateId");
					this.OnVehicleLicensePlateIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TblVehicle_TblLot", Storage="_TblVehicle", ThisKey="VehicleLicensePlateId", OtherKey="LicensePlateId", IsForeignKey=true)]
		public TblVehicle TblVehicle
		{
			get
			{
				return this._TblVehicle.Entity;
			}
			set
			{
				TblVehicle previousValue = this._TblVehicle.Entity;
				if (((previousValue != value) 
							|| (this._TblVehicle.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TblVehicle.Entity = null;
						previousValue.TblLots.Remove(this);
					}
					this._TblVehicle.Entity = value;
					if ((value != null))
					{
						value.TblLots.Add(this);
						this._VehicleLicensePlateId = value.LicensePlateId;
					}
					else
					{
						this._VehicleLicensePlateId = default(string);
					}
					this.SendPropertyChanged("TblVehicle");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
